@using CyclingPerformance.Web.Models
@using CyclingPerformance.Web.Constants
@using CyclingPerformance.Web.Services

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Power - Time Calculator</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Minimize" Color="Color.Default" OnClick="ResetCalculation" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudForm @ref="climbPowerCalculatorForm" Model="model" Spacing="5">
            <MudSelect Label="Select Mode" @bind-Value="calculationMode" Required="true">
                <MudSelectItem Value="@("PowerToTime")">Input Power, Get Time</MudSelectItem>
                <MudSelectItem Value="@("TimeToPower")">Input Time, Get Power</MudSelectItem>
            </MudSelect>

            @if (calculationMode == "PowerToTime")
            {
                <MudNumericField T="double?" Label="Power (P)" @bind-Value="model.Power" For="() => model.TimeMinutes" Required="true" />
            }
            else if (calculationMode == "TimeToPower")
            {
                <MudGrid>
                    <MudItem xs="6">
                        <MudNumericField T="double?" Label="Time (min)" @bind-Value="model.TimeMinutes" For="() => model.TimeMinutes" Required="true" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="double?" Label="Time (sec)" @bind-Value="model.TimeSeconds" For="() => model.TimeSeconds" Required="true" />
                    </MudItem>
                </MudGrid>
            }

            <MudGrid>
                <MudItem xs="6">
                    <MudNumericField T="double" Label="Rider Weight (kg)" @bind-Value="model.MassOfRider" For="() => model.MassOfRider" Required="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField T="double" Label="Bicycle Weight (kg)" @bind-Value="model.MassOfBike" For="() => model.MassOfBike" Required="true" />
                </MudItem>
            </MudGrid>
        
            <MudGrid>
                <MudItem xs="6">
                    <MudNumericField T="double" Label="Distance (m)" @bind-Value="model.Distance" For="() => model.Distance" Required="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField T="double" Label="Altitude Gain (m)" @bind-Value="model.AltitudeGain" For="() => model.AltitudeGain" Required="true" />
                </MudItem>
            </MudGrid>


            <MudGrid>
                <MudItem xs="6">
                    <MudNumericField T="double" Label="Air Temp. (°C)" @bind-Value="model.AirTemperatureCelsius" For="() => model.AirTemperatureCelsius" Required="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField T="double" Label="Headwind (km/h)" @bind-Value="model.Headwind" For="() => model.Headwind" Required="true" />
                </MudItem>
            </MudGrid>
            <MudGrid>
                <MudItem xs="6">
                    <MudNumericField T="double" Label="Cda" @bind-Value="model.CdA" Required="true" For="() => model.CdA" Step="0.01" />
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField T="double" Label="Crr" @bind-Value="model.Crr" Required="true" For="() => model.Crr" Step="0.001" />
                </MudItem>
            </MudGrid>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Calculate">Calculate</MudButton>
        </MudForm>
        @if (calculationMode == "PowerToTime" && finishTimeMinutes != null && finishTimeSeconds != null)
        {
            <div class="mt-3">
                <MudText Typo="Typo.h6" Color="Color.Primary">Finish Time: @finishTimeMinutes min @finishTimeSeconds s</MudText>
                <MudText Typo="Typo.h6" Color="Color.Primary">Relative Power: @relativePower W/Kg</MudText>
                <MudText Typo="Typo.h6" Color="Color.Primary">VAM: @vam m/h</MudText>
                <MudText Typo="Typo.h6" Color="Color.Primary">Avg. Speed: @_calculationService.MsToKmh(avgSpeed) km/h</MudText>
            </div>

        }
        else if (calculationMode == "TimeToPower" && requiredPower != null)
        {
            <div class="mt-3">
                <MudText Typo="Typo.h6" Color="Color.Primary">Required Power: @requiredPower.Value W</MudText>
                <MudText Typo="Typo.h6" Color="Color.Primary">Relative Power: @relativePower W/Kg</MudText>
                <MudText Typo="Typo.h6" Color="Color.Primary">VAM: @vam m/h</MudText>
                <MudText Typo="Typo.h6" Color="Color.Primary">Avg. Speed: @_calculationService.MsToKmh(avgSpeed) km/h</MudText>
            </div>
        }

    </MudCardContent>
</MudCard>

@code {
    [Inject] private IPowerTimeCalculationService _calculationService { get; set; } = default!;
    private MudForm climbPowerCalculatorForm = new();
    private PowerTimeModel model = new();
    private string calculationMode = "PowerToTime";

    private double? finishTimeMinutes;
    private double? finishTimeSeconds;
    private double? requiredPower;
    private double avgSpeed;
    private double vam;
    private double relativePower;

    protected override void OnInitialized()
    {
        model = new PowerTimeModel
            {
                Power = 300,
                TimeMinutes = 14,
                TimeSeconds = 0,
                MassOfRider = 70,
                MassOfBike = 9,
                AirTemperatureCelsius = 25,
                CdA = Physics.CdA,
                Crr = Physics.Crr,
                Distance = 3000,           
                AltitudeGain = 300,
                Headwind = 0
            };
    }

    private async Task Calculate()
    {
        await climbPowerCalculatorForm.Validate();

        if (!climbPowerCalculatorForm.IsValid)
        {
            Console.WriteLine("Form is invalid."); 
            return;
        }

        double airDensity = _calculationService.CalculateAirDensity(model.AirTemperatureKelvin);
        double rollingResistance = _calculationService.CalculateRollingResistance(model.MassOfBike, model.MassOfRider, model.Crr);
        double slopePullForce = _calculationService.CalculateSlopePullForce(model.AltitudeGain, model.Distance, model.MassOfBike, model.MassOfRider);
        double aeroDrag = _calculationService.CalculateAeroDragCoefficient(model.CdA, airDensity);
        double headwind = _calculationService.KmhToMs(model.Headwind);

        if (calculationMode == "PowerToTime" && model.Power.HasValue)
        {
            avgSpeed = _calculationService.NewtonMethod(aeroDrag, headwind, rollingResistance, slopePullForce, model.Power.Value);
            double timeInSeconds = _calculationService.CalculateTimeInSeconds(model.Distance, avgSpeed);

            finishTimeMinutes = Math.Floor(timeInSeconds / 60);
            finishTimeSeconds = Math.Floor(timeInSeconds % 60);

            vam = @_calculationService.CalculateVAM(model.AltitudeGain, _calculationService.ConvertToSeconds(finishTimeMinutes.Value, finishTimeSeconds.Value));
            relativePower = @_calculationService.CalculateWkg(model.Power!.Value, model.MassOfRider);
        }
        else if (calculationMode == "TimeToPower" && model.TimeMinutes.HasValue && model.TimeSeconds.HasValue)
        {
            double totalTimeInSeconds = _calculationService.ConvertToSeconds(model.TimeMinutes.Value, model.TimeSeconds.Value);
            avgSpeed = _calculationService.CalculateVelocity(model.Distance, totalTimeInSeconds);

            requiredPower = _calculationService.CalculateRequiredPower(                
                avgSpeed,
                rollingResistance,
                slopePullForce,
                model.CdA,
                airDensity,
                headwind
            );

            vam = @_calculationService.CalculateVAM(model.AltitudeGain, _calculationService.ConvertToSeconds(model.TimeMinutes!.Value, model.TimeSeconds!.Value));
            relativePower = @_calculationService.CalculateWkg(requiredPower.Value, model.MassOfRider);
        }
    }

    private void ResetCalculation()
    {
        finishTimeMinutes = null;
        finishTimeSeconds = null;
        requiredPower = null;
    }

    private void OnValidSubmit()
    {
        Calculate();
    }
}